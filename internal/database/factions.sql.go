// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: factions.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createFaction = `-- name: CreateFaction :one
INSERT INTO factions (game_id, name, allegiance)
VALUES ($1, $2, $3)
RETURNING id, game_id, name, allegiance, version, source, created_at, updated_at
`

type CreateFactionParams struct {
	GameID     uuid.UUID
	Name       string
	Allegiance string
}

func (q *Queries) CreateFaction(ctx context.Context, arg CreateFactionParams) (Faction, error) {
	row := q.db.QueryRow(ctx, createFaction, arg.GameID, arg.Name, arg.Allegiance)
	var i Faction
	err := row.Scan(
		&i.ID,
		&i.GameID,
		&i.Name,
		&i.Allegiance,
		&i.Version,
		&i.Source,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const delteFaction = `-- name: DelteFaction :exec
DELETE FROM factions 
WHERE id = $1
`

func (q *Queries) DelteFaction(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, delteFaction, id)
	return err
}

const getAllFactions = `-- name: GetAllFactions :many
SELECT id, game_id, name, allegiance, version, source, created_at, updated_at FROM factions 
ORDER BY game_id, name ASC
`

func (q *Queries) GetAllFactions(ctx context.Context) ([]Faction, error) {
	rows, err := q.db.Query(ctx, getAllFactions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Faction
	for rows.Next() {
		var i Faction
		if err := rows.Scan(
			&i.ID,
			&i.GameID,
			&i.Name,
			&i.Allegiance,
			&i.Version,
			&i.Source,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFaction = `-- name: GetFaction :one
SELECT id, game_id, name, allegiance, version, source, created_at, updated_at FROM factions 
WHERE id = $1
`

func (q *Queries) GetFaction(ctx context.Context, id uuid.UUID) (Faction, error) {
	row := q.db.QueryRow(ctx, getFaction, id)
	var i Faction
	err := row.Scan(
		&i.ID,
		&i.GameID,
		&i.Name,
		&i.Allegiance,
		&i.Version,
		&i.Source,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFactionsByID = `-- name: GetFactionsByID :many
SELECT id, game_id, name, allegiance, version, source, created_at, updated_at FROM factions 
WHERE game_id = $1 
ORDER BY name ASC
`

func (q *Queries) GetFactionsByID(ctx context.Context, gameID uuid.UUID) ([]Faction, error) {
	rows, err := q.db.Query(ctx, getFactionsByID, gameID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Faction
	for rows.Next() {
		var i Faction
		if err := rows.Scan(
			&i.ID,
			&i.GameID,
			&i.Name,
			&i.Allegiance,
			&i.Version,
			&i.Source,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
