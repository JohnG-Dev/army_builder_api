// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: games.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createGame = `-- name: CreateGame :one
INSERT INTO games (name, edition, version, source)
VALUES ($1, $2, $3, $4)
RETURNING id, name, edition, version, source, created_at, updated_at
`

type CreateGameParams struct {
	Name    string
	Edition string
	Version string
	Source  string
}

func (q *Queries) CreateGame(ctx context.Context, arg CreateGameParams) (Game, error) {
	row := q.db.QueryRow(ctx, createGame,
		arg.Name,
		arg.Edition,
		arg.Version,
		arg.Source,
	)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Edition,
		&i.Version,
		&i.Source,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteGame = `-- name: DeleteGame :exec
DELETE FROM games
WHERE id = $1
`

func (q *Queries) DeleteGame(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteGame, id)
	return err
}

const getGame = `-- name: GetGame :one
SELECT id, name, edition, version, source, created_at, updated_at
FROM games
WHERE id = $1
`

func (q *Queries) GetGame(ctx context.Context, id uuid.UUID) (Game, error) {
	row := q.db.QueryRow(ctx, getGame, id)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Edition,
		&i.Version,
		&i.Source,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getGameByName = `-- name: GetGameByName :one
SELECT id, name, edition, version, source, created_at, updated_at
FROM games
WHERE name = $1
`

func (q *Queries) GetGameByName(ctx context.Context, name string) (Game, error) {
	row := q.db.QueryRow(ctx, getGameByName, name)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Edition,
		&i.Version,
		&i.Source,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getGames = `-- name: GetGames :many
SELECT id, name, edition, version, source, created_at, updated_at
FROM games
ORDER BY name ASC
`

func (q *Queries) GetGames(ctx context.Context) ([]Game, error) {
	rows, err := q.db.Query(ctx, getGames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Game
	for rows.Next() {
		var i Game
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Edition,
			&i.Version,
			&i.Source,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGame = `-- name: UpdateGame :one
UPDATE games
SET edition = $2, version = $3, source = $4, updated_at = now()
WHERE id = $1
RETURNING id, name, edition, version, source, created_at, updated_at
`

type UpdateGameParams struct {
	ID      uuid.UUID
	Edition string
	Version string
	Source  string
}

func (q *Queries) UpdateGame(ctx context.Context, arg UpdateGameParams) (Game, error) {
	row := q.db.QueryRow(ctx, updateGame,
		arg.ID,
		arg.Edition,
		arg.Version,
		arg.Source,
	)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Edition,
		&i.Version,
		&i.Source,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
