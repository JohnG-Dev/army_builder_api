// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: keywords.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addKeywordToUnit = `-- name: AddKeywordToUnit :exec
INSERT INTO unit_keywords (unit_id, keyword_id, value)
VALUES ($1, $2, $3)
ON CONFLICT DO NOTHING
`

type AddKeywordToUnitParams struct {
	UnitID    uuid.UUID
	KeywordID uuid.UUID
	Value     string
}

func (q *Queries) AddKeywordToUnit(ctx context.Context, arg AddKeywordToUnitParams) error {
	_, err := q.db.Exec(ctx, addKeywordToUnit, arg.UnitID, arg.KeywordID, arg.Value)
	return err
}

const createKeyword = `-- name: CreateKeyword :one
INSERT INTO keywords (game_id, name, description, version, source)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, game_id, name, description, version, source, created_at, updated_at
`

type CreateKeywordParams struct {
	GameID      uuid.UUID
	Name        string
	Description string
	Version     string
	Source      string
}

func (q *Queries) CreateKeyword(ctx context.Context, arg CreateKeywordParams) (Keyword, error) {
	row := q.db.QueryRow(ctx, createKeyword,
		arg.GameID,
		arg.Name,
		arg.Description,
		arg.Version,
		arg.Source,
	)
	var i Keyword
	err := row.Scan(
		&i.ID,
		&i.GameID,
		&i.Name,
		&i.Description,
		&i.Version,
		&i.Source,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteKeyword = `-- name: DeleteKeyword :exec
DELETE FROM keywords
WHERE id = $1
`

func (q *Queries) DeleteKeyword(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteKeyword, id)
	return err
}

const getAllKeywords = `-- name: GetAllKeywords :many
SELECT id, game_id, name, description, version, source, created_at, updated_at
FROM keywords
ORDER BY game_id, name ASC
`

func (q *Queries) GetAllKeywords(ctx context.Context) ([]Keyword, error) {
	rows, err := q.db.Query(ctx, getAllKeywords)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Keyword
	for rows.Next() {
		var i Keyword
		if err := rows.Scan(
			&i.ID,
			&i.GameID,
			&i.Name,
			&i.Description,
			&i.Version,
			&i.Source,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getKeywordByID = `-- name: GetKeywordByID :one
SELECT id, game_id, name, description, version, source, created_at, updated_at
FROM keywords
WHERE id = $1
`

func (q *Queries) GetKeywordByID(ctx context.Context, id uuid.UUID) (Keyword, error) {
	row := q.db.QueryRow(ctx, getKeywordByID, id)
	var i Keyword
	err := row.Scan(
		&i.ID,
		&i.GameID,
		&i.Name,
		&i.Description,
		&i.Version,
		&i.Source,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getKeywordsByGame = `-- name: GetKeywordsByGame :many
SELECT id, game_id, name, description, version, source, created_at, updated_at
FROM keywords
WHERE game_id = $1
ORDER BY name ASC
`

func (q *Queries) GetKeywordsByGame(ctx context.Context, gameID uuid.UUID) ([]Keyword, error) {
	rows, err := q.db.Query(ctx, getKeywordsByGame, gameID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Keyword
	for rows.Next() {
		var i Keyword
		if err := rows.Scan(
			&i.ID,
			&i.GameID,
			&i.Name,
			&i.Description,
			&i.Version,
			&i.Source,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getKeywordsForUnit = `-- name: GetKeywordsForUnit :many
SELECT k.id, k.game_id, k.name, k.description, k.version, k.source, k.created_at, k.updated_at
FROM keywords k
JOIN unit_keywords uk ON k.id = uk.keyword_id
WHERE uk.unit_id = $1
ORDER BY k.name ASC
`

func (q *Queries) GetKeywordsForUnit(ctx context.Context, unitID uuid.UUID) ([]Keyword, error) {
	rows, err := q.db.Query(ctx, getKeywordsForUnit, unitID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Keyword
	for rows.Next() {
		var i Keyword
		if err := rows.Scan(
			&i.ID,
			&i.GameID,
			&i.Name,
			&i.Description,
			&i.Version,
			&i.Source,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUnitsWithKeyword = `-- name: GetUnitsWithKeyword :many
SELECT DISTINCT u.id, u.faction_id, u.name, u.description, u.is_manifestation, u.move, u.health, u.save, u.ward, u.control, u.points, u.summon_cost, u.banishment, u.rend, u.attacks, u.damage, u.min_size, u.max_size, u.matched_play, u.version, u.source, u.created_at, u.updated_at
FROM units u
JOIN unit_keywords uk ON u.id = uk.unit_id
JOIN keywords k ON uk.keyword_id = k.id
WHERE k.name = $1
ORDER BY u.name ASC
`

func (q *Queries) GetUnitsWithKeyword(ctx context.Context, name string) ([]Unit, error) {
	rows, err := q.db.Query(ctx, getUnitsWithKeyword, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Unit
	for rows.Next() {
		var i Unit
		if err := rows.Scan(
			&i.ID,
			&i.FactionID,
			&i.Name,
			&i.Description,
			&i.IsManifestation,
			&i.Move,
			&i.Health,
			&i.Save,
			&i.Ward,
			&i.Control,
			&i.Points,
			&i.SummonCost,
			&i.Banishment,
			&i.Rend,
			&i.Attacks,
			&i.Damage,
			&i.MinSize,
			&i.MaxSize,
			&i.MatchedPlay,
			&i.Version,
			&i.Source,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUnitsWithKeywordAndValue = `-- name: GetUnitsWithKeywordAndValue :many
SELECT DISTINCT u.id, u.faction_id, u.name, u.description, u.is_manifestation, u.move, u.health, u.save, u.ward, u.control, u.points, u.summon_cost, u.banishment, u.rend, u.attacks, u.damage, u.min_size, u.max_size, u.matched_play, u.version, u.source, u.created_at, u.updated_at
FROM units u
JOIN unit_keywords uk ON u.id = uk.unit_id
JOIN keywords k ON uk.keyword_id = k.id
WHERE k.name = $1 AND uk.value = $2
ORDER BY u.name ASC
`

type GetUnitsWithKeywordAndValueParams struct {
	Name  string
	Value string
}

func (q *Queries) GetUnitsWithKeywordAndValue(ctx context.Context, arg GetUnitsWithKeywordAndValueParams) ([]Unit, error) {
	rows, err := q.db.Query(ctx, getUnitsWithKeywordAndValue, arg.Name, arg.Value)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Unit
	for rows.Next() {
		var i Unit
		if err := rows.Scan(
			&i.ID,
			&i.FactionID,
			&i.Name,
			&i.Description,
			&i.IsManifestation,
			&i.Move,
			&i.Health,
			&i.Save,
			&i.Ward,
			&i.Control,
			&i.Points,
			&i.SummonCost,
			&i.Banishment,
			&i.Rend,
			&i.Attacks,
			&i.Damage,
			&i.MinSize,
			&i.MaxSize,
			&i.MatchedPlay,
			&i.Version,
			&i.Source,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeKeywordFromUnit = `-- name: RemoveKeywordFromUnit :exec
DELETE FROM unit_keywords
WHERE unit_id = $1 AND keyword_id = $2
`

type RemoveKeywordFromUnitParams struct {
	UnitID    uuid.UUID
	KeywordID uuid.UUID
}

func (q *Queries) RemoveKeywordFromUnit(ctx context.Context, arg RemoveKeywordFromUnitParams) error {
	_, err := q.db.Exec(ctx, removeKeywordFromUnit, arg.UnitID, arg.KeywordID)
	return err
}

const updateKeywordValue = `-- name: UpdateKeywordValue :exec
UPDATE unit_keywords
SET value = $3
WHERE unit_id = $1 AND keyword_id = $2
`

type UpdateKeywordValueParams struct {
	UnitID    uuid.UUID
	KeywordID uuid.UUID
	Value     string
}

func (q *Queries) UpdateKeywordValue(ctx context.Context, arg UpdateKeywordValueParams) error {
	_, err := q.db.Exec(ctx, updateKeywordValue, arg.UnitID, arg.KeywordID, arg.Value)
	return err
}
