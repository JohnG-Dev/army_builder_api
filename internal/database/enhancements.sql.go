// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: enhancements.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createEnhancement = `-- name: CreateEnhancement :one
INSERT INTO enhancements (faction_id, name, description, points)
VALUES ($1, $2, $3, $4)
RETURNING id, faction_id, name, enhancement_type, description, points, version, source, created_at, updated_at
`

type CreateEnhancementParams struct {
	FactionID   uuid.UUID
	Name        string
	Description string
	Points      int32
}

func (q *Queries) CreateEnhancement(ctx context.Context, arg CreateEnhancementParams) (Enhancement, error) {
	row := q.db.QueryRow(ctx, createEnhancement,
		arg.FactionID,
		arg.Name,
		arg.Description,
		arg.Points,
	)
	var i Enhancement
	err := row.Scan(
		&i.ID,
		&i.FactionID,
		&i.Name,
		&i.EnhancementType,
		&i.Description,
		&i.Points,
		&i.Version,
		&i.Source,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteEnhancement = `-- name: DeleteEnhancement :exec
DELETE FROM enhancements 
WHERE id = $1
`

func (q *Queries) DeleteEnhancement(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteEnhancement, id)
	return err
}

const getEnhancementByID = `-- name: GetEnhancementByID :one
SELECT id, faction_id, name, enhancement_type, description, points, version, source, created_at, updated_at FROM enhancements 
WHERE id = $1
`

func (q *Queries) GetEnhancementByID(ctx context.Context, id uuid.UUID) (Enhancement, error) {
	row := q.db.QueryRow(ctx, getEnhancementByID, id)
	var i Enhancement
	err := row.Scan(
		&i.ID,
		&i.FactionID,
		&i.Name,
		&i.EnhancementType,
		&i.Description,
		&i.Points,
		&i.Version,
		&i.Source,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEnhancements = `-- name: GetEnhancements :many
SELECT id, faction_id, name, enhancement_type, description, points, version, source, created_at, updated_at FROM enhancements
ORDER BY faction_id, name ASC
`

func (q *Queries) GetEnhancements(ctx context.Context) ([]Enhancement, error) {
	rows, err := q.db.Query(ctx, getEnhancements)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Enhancement
	for rows.Next() {
		var i Enhancement
		if err := rows.Scan(
			&i.ID,
			&i.FactionID,
			&i.Name,
			&i.EnhancementType,
			&i.Description,
			&i.Points,
			&i.Version,
			&i.Source,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEnhancementsForFaction = `-- name: GetEnhancementsForFaction :many
SELECT id, faction_id, name, enhancement_type, description, points, version, source, created_at, updated_at FROM enhancements
WHERE faction_id = $1
ORDER BY faction_id, name ASC
`

func (q *Queries) GetEnhancementsForFaction(ctx context.Context, factionID uuid.UUID) ([]Enhancement, error) {
	rows, err := q.db.Query(ctx, getEnhancementsForFaction, factionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Enhancement
	for rows.Next() {
		var i Enhancement
		if err := rows.Scan(
			&i.ID,
			&i.FactionID,
			&i.Name,
			&i.EnhancementType,
			&i.Description,
			&i.Points,
			&i.Version,
			&i.Source,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
